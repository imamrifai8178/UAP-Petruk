#include <iostream>
#include <vector>
#include <stack>
#include <cstdio>
#include <cmath>
#include <algorithm>

using namespace std;

bool isoperator(char x) {
    return (x == '+' || x == '/' || x == '*' || x == '%' || x == '-');
}

bool isparenthesis(char x) {
    return (x == '(' || x == ')');
}

string parseinfix(string infix) {
    string result;
    int length = infix.length();
    stack<char> infixstack;

    if (infix[0] == '-' && infix[1] == '(') {
        infixstack.push('-');
        infixstack.push('1');
        infixstack.push(' ');
        infixstack.push('*');
        infixstack.push(' ');
    } else {
        infixstack.push(infix[0]);
    }

    for (int i = 1; i < length; i++) {
        char a = infix[i];
        if (a == ' ') {
            continue;
        } else if (a == '-' && isoperator(infix[i - 1])) {
            infixstack.push('-');
            infixstack.push('1');
            infixstack.push(' ');
            infixstack.push('*');
            infixstack.push(' ');
        } else if (isdigit(a)) {
            infixstack.push(a);
        } else if (infix[i - 1] == '(' && a == '-') {
            infixstack.push(a);
        } else if (a == '(') {
            infixstack.push(a);
            infixstack.push(' ');
        } else if (a == ')') {
            infixstack.push(' ');
            infixstack.push(a);
        } else {
            infixstack.push(' ');
            infixstack.push(a);
            infixstack.push(' ');
        }
    }

    while (!infixstack.empty()) {
        char a = infixstack.top();
        result += a;
        infixstack.pop();
    }
    
    reverse(result.begin(), result.end());
    return result;
}

int main() {
    string input, infix, result;
    getline(cin, input);

    for (char a : input) {
        if (a != ' ') {
            infix += a;
        }
    }

    result = parseinfix(infix);
    cout << result << '\n';
    return 0;
}
